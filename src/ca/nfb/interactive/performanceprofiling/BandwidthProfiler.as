package ca.nfb.interactive.performanceprofiling {	import flash.display.Loader;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IEventDispatcher;	import flash.events.ProgressEvent;	import flash.events.TimerEvent;	import flash.net.NetStream;	import flash.utils.Timer;	import flash.utils.getTimer;		import ca.nfb.interactive.log.Log;
		public class BandwidthProfiler extends EventDispatcher {		private static var instance:BandwidthProfiler = new BandwidthProfiler()				//in kbps			private var currentBandwidth:int = 0		private var bandwidths:Array = []				public function BandwidthProfiler(target:IEventDispatcher=null) {			if (instance) {				throw new Error("BANDWIDTHPROFILER ALREADY EXISTS")			}		}		public static function getInstance():BandwidthProfiler {			return instance		}						public function get bandwidth():int {			return currentBandwidth		}				private var startTime:uint		private var endTime:uint		private var totalBytes:uint				public function onStart(e:Event):void {			//Log.USE_LOG && Log.logmsg("[BANDWIDTHPROFILER] onStart")			start()		}				private function start():void {			//Log.USE_LOG && Log.logmsg("START")			startTime = getTimer()		}		public function onProgress(e:ProgressEvent):void {			stortTotalBytes(e.bytesTotal)		}		public function checkTimerProgress(e:TimerEvent):void {			//Log.USE_LOG && Log.logmsg("[BANDWIDTHPROFILER] checkTimerProgress ns.bytesLoaded: " + ns.bytesLoaded);						stortTotalBytes(ns.bytesTotal)						if (ns.bytesTotal == ns.bytesLoaded && ns.bytesLoaded) {				onComplete(null)			}		}		private function stortTotalBytes(tot:int):void {			totalBytes = tot		}		public function onComplete(e:Event):void {			//Log.USE_LOG && Log.logmsg("[BANDWIDTHPROFILER] onComplete")						if (e) {				e.target.removeEventListener(Event.OPEN, onStart, onStart)				e.target.removeEventListener(ProgressEvent.PROGRESS, onProgress)				e.target.removeEventListener(Event.COMPLETE, onComplete, onComplete)			}						if (timer) {				timer.removeEventListener(TimerEvent.TIMER, checkTimerProgress)				timer.stop()			}			timer = null						calculateBandwidth()		}		private var ns:NetStream		private function calculateBandwidth():void {			endTime = getTimer()			var totalTime:int = endTime - startTime			currentBandwidth = (totalBytes / (totalTime / 1000)) / 1000;									bandwidths.push(currentBandwidth)						if(bandwidths.length>3) bandwidths.shift()						var total:int = 0							for (var i:int = 0; i < bandwidths.length; i++) {				total += bandwidths[i]			}								currentBandwidth = total / bandwidths.length						//Log.USE_LOG && Log.logmsg("[BANDWIDTHPROFILER] TOTALBYTES:" + totalBytes);			//Log.USE_LOG && Log.logmsg("[BANDWIDTHPROFILER] TOTALTIME:" + totalTime);			//Log.USE_LOG && Log.logmsg("[BANDWIDTHPROFILER] BANDWIDTHS:" + bandwidths);			//Log.USE_LOG && Log.logmsg("[BANDWIDTHPROFILER] CURRENTAVERAGEBANDWIDTH:" + currentBandwidth);						dispatchEvent(new Event(Event.COMPLETE))				}		public function handleLoaders(evtd:EventDispatcher):void {			//Log.USE_LOG && Log.logmsg("[BANDWIDTHPROFILER] handleLoaders evtd", evtd);			if (evtd is Loader) {				Loader(evtd).contentLoaderInfo.addEventListener(Event.OPEN, onStart, false, 0, true)				Loader(evtd).contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS, onProgress, false, 0, true)				Loader(evtd).contentLoaderInfo.addEventListener(Event.COMPLETE, onComplete, false, 0, true)			} else if (evtd is EventDispatcher) {				evtd.addEventListener(Event.OPEN, onStart, false, 0, true)				evtd.addEventListener(ProgressEvent.PROGRESS, onProgress, false, 0, true)				evtd.addEventListener(Event.COMPLETE, onComplete, false, 0, true)			}		}				private var timer:Timer		public function handleNetStreams(evtd:NetStream):void {			//Log.USE_LOG && Log.logmsg("[BANDW[BANDW] handleNetStreams")						ns = evtd			start()						if (timer) {				timer.removeEventListener(TimerEvent.TIMER, checkTimerProgress)				timer.stop()			}						timer = new Timer(10);			timer.addEventListener(TimerEvent.TIMER, checkTimerProgress)			timer.start()		}			}}